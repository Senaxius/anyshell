#!/bin/bash
Server_dns=noftp.ddns.net
Server_local_IP=192.168.178.21
Server_public_IP=$(nslookup $Server_dns | sed -n 's/Address: //p')
Server_user=senaex

systemctl is-enabled sshd.service >/dev/null 2>&1 && Host_sshd=1 || Host_sshd=0

update () {
    sed -i '1s/.*/1/' ~/.anyshell/status/$HOSTNAME
    time=$(echo "$(date +%y)$(date +%m)$(date +%d):$(date +%H)$(date +%M)$(date +%S)")
    sed -i "2s/.*/$time/" ~/.anyshell/status/$HOSTNAME

    IP_own=$(echo "$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')")
    sed -i "3 s/.*/$IP_own/" ~/.anyshell/status/$HOSTNAME
    IP_own=$(curl -s ifconfig.me | grep -o -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')
    sed -i "4 s/.*/$IP_own/" ~/.anyshell/status/$HOSTNAME

    sed -r -i 's/\s+//g' ~/.anyshell/status/$HOSTNAME

    scp -P 41999 ~/.anyshell/status/$HOSTNAME $Server_user@$Server_dns:/home/$Server_user/.anyshell/status/ >/dev/null
}

if [ "$1" == "connect" ]; then
    if [ -d ~/.anyshell/hosts ]; then rm -r ~/.anyshell/hosts; fi
    if [ -d ~/.anyshell/status ]; then rm -r ~/.anyshell/status; fi
    scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/status ~/.anyshell/ >/dev/null
    scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts ~/.anyshell/ >/dev/null
    if [[ $EUID == 0 ]]; then chmod a+wrx -R ~/.anyshell/hosts ~/.anyshell/status; fi
    Client_public_IP=$(curl -s ifconfig.me | grep -o -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')

    echo -e "\nWhich Host do you want to connect to?\n"
    i=1
    for file in ~/.anyshell/hosts/*; do
        name=$(basename $file) 
        echo "$i:  $name"
        i=$(( $i + 1 ))
    done
    echo ""

    read -p "Number:" Host_number

    echo ""
    online="online:" 
    name="Hostname:" 
    user="User:"
    local_IP="local-IP:"
    public_IP="public-IP:"
    printf '%-8s %-10s %-10s %-15s %-15s\n' $online $name $user $local_IP $public_IP

    dir=(~/.anyshell/hosts/*)
    Host_name="${dir[$(( $Host_number - 1 ))]}"
    Host_name=$(basename $Host_name) 
    Host_online=$(sed -n 1p ~/.anyshell/status/$Host_name)
    Host_user=$(sed -n 2p ~/.anyshell/hosts/$Host_name)
    Host_local_IP=$(sed -n 3p ~/.anyshell/status/$Host_name)
    Host_public_IP=$(sed -n 4p ~/.anyshell/status/$Host_name)
    printf '%-8s %-10s %-10s %-15s %-15s\n' $Host_online $Host_name $Host_user $Host_local_IP $Host_public_IP

    echo -e "\nRequesting..."
    sed -i '6s/.*/1/' ~/.anyshell/hosts/$Host_name
    scp -P 41999 ~/.anyshell/hosts/$Host_name $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts/ >/dev/null

    if [[ "$Host_public_IP" == "$Client_public_IP" ]]; then
        echo -e "\nTarget is on same network, connecting localy:"
        for (( i = 0; i <= 10 ; i++ )); do
            {
                ssh $Host_user@$Host_local_IP -q && break 
            } || { 
                echo -n "."
                if [ $i == 10 ]; then
                    echo -e "\nCould not create a connection, client might be offline"
                fi
                sleep 1
            }
        done
    elif [ "$Client_public_IP" == "$Server_public_IP" ]; then
        echo -e "\n Server is on same network, connecting localy:"
        ssh -f -N -T -M -S ~/.anyshell/socket $Server_user@$Server_local_IP -p 41999 -L 41998:localhost:$Port
        for (( i = 0; i <= 10 ; i++ )); do
            {
                ssh $Host_user@localhost -q -p 41998 && break 
            } || { 
                echo -n "."
                if [ $i == 10 ]; then
                    echo -e "\nCould not create a connection, client might be offline"
                fi
                sleep 1
            }
        done
        ssh -S ~/.anyshell/socket -O exit localhost
    else
        ssh -f -N -T -M -S ~/.anyshell/socket $Server_user@$Server_dns -p 41999 -L 41998:localhost:$Port
        for (( i = 0; i <= 10 ; i++ )); do
            {
                ssh $Host_user@localhost -q -p 41998 && break 
            } || { 
                echo -n "."
                if [ $i == 10 ]; then
                    echo -e "\nCould not create a connection, client might be offline"
                fi
                sleep 1
            }
        done
        ssh -S ~/.anyshell/socket -O exit localhost
    fi

    sed -i '6s/.*/0/' ~/.anyshell/hosts/$Host_name
    scp -P 41999 ~/.anyshell/hosts/$Host_name $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts/ >/dev/null

elif [ "$1" == "list" ]; then
    if [ -d ~/.anyshell/hosts ]; then rm -r ~/.anyshell/hosts; fi
    if [ -d ~/.anyshell/status ]; then rm -r ~/.anyshell/status; fi
    scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/status ~/.anyshell/ >/dev/null
    scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts ~/.anyshell/ >/dev/null
    if [[ $EUID == 0 ]]; then chmod a+wrx -R ~/.anyshell/hosts ~/.anyshell/status; fi

    online="online:" 
    name="Hostname:" 
    user="User:"
    local_IP="local-IP:"
    public_IP="public-IP:"
    printf '%-8s %-10s %-10s %-15s %-15s\n' $online $name $user $local_IP $public_IP
    for file in ~/.anyshell/hosts/*; do
        name=$(basename $file) 
        online=$(sed -n 1p ~/.anyshell/status/$name)
        user=$(sed -n 2p $file)
        local_IP=$(sed -n 3p ~/.anyshell/status/$name)
        public_IP=$(sed -n 4p ~/.anyshell/status/$name)
        printf '%-8s %-10s %-10s %-15s %-15s\n' $online $name $user $local_IP $public_IP
    done

elif [ "$1" == "server" ]; then
    while [ 1 == 1 ]; do
        for file in ~/.anyshell/status/*; do
            temp=$(sed -n 2p $file)
            client_time=$(echo "$temp" | awk 'BEGIN{FS=":"} {print $2}')
            client_date=$(echo "$temp" | awk 'BEGIN{FS=":"} {print $1}')
            real_time=$(echo "$(date +%H)$(date +%M)$(date +%S)")
            real_date=$(echo "$(date +%y)$(date +%m)$(date +%d)")

            if [ $client_date -lt $real_date ]; then
                echo "offline"
                sed -i '1s/.*/0/' $file
            elif [ $(( "$((10#$real_time + 1))" - 10 )) -gt "$((10#$client_time + 1))" ]; then
                echo "offline"
                sed -i '1s/.*/0/' $file
            else
                echo "online"
                sed -i '1s/.*/1/' $file
            fi
        done
        sleep 2
    done

elif [ "$1" == "update" ]; then
    update

elif [ "$1" == "host" ]; then
    if [ -d ~/.anyshell/hosts ]; then rm -r ~/.anyshell/hosts; fi
    if [ -d ~/.anyshell/status ]; then rm -r ~/.anyshell/status; fi
    scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/status ~/.anyshell/ >/dev/null
    scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts ~/.anyshell/ >/dev/null
    if [[ $EUID == 0 ]]; then chmod a+wrx -R ~/.anyshell/hosts ~/.anyshell/status; fi
    if [ "$2" == "up" ]; then
        echo "Hosting on this Device..."
        own_port=$(sed -n 3p ~/.anyshell/hosts/$HOSTNAME)
        if [ $Host_sshd == "0" ]; then
            sudo systemctl start sshd.service
        fi
        ssh -f -N -T -M -S ~/.anyshell/socket2 -R $own_port:localhost:22 $Server_user@$Server_dns -p 41999
        echo "done"

    elif [ "$2" == "down" ]; then
        echo "Stop hosting on this Device..."
        ssh -S ~/.anyshell/socket2 -O exit $Server_dns 
        if [ $Host_sshd == "0" ]; then
            sudo systemctl stop sshd.service
        fi
        echo "done"

    elif [ "$2" == "deamon" ]; then
        echo "Starting anydesk backround deamon.."
        while [ 1 == 1 ]; do
            scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts ~/.anyshell/ >/dev/null
            if [[ $EUID == 0 ]]; then chmod a+wrx -R ~/.anyshell/hosts ~/.anyshell/status; fi
            update
            requested=$(sed -n 4p ~/.anyshell/hosts/$HOSTNAME)
            if [ "$requested" == "0" ]; then
                echo "not requested"
                if [ -S $HOME/.anyshell/socket2 ]; then
                    anyshell host down
                fi
            else
                echo "requested"
                if [ ! -S $HOME/.anyshell/socket2 ]; then
                    anyshell host up 
                fi
            fi 
            sleep 1
        done

    elif [ "$2" == "setup" ]; then
        if [ -d ~/.anyshell/hosts ]; then rm -r ~/.anyshell/hosts; fi
        if [ -d ~/.anyshell/status ]; then rm -r ~/.anyshell/status; fi
        scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/status ~/.anyshell/ >/dev/null
        scp -P 41999 -r $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts ~/.anyshell/ >/dev/null
        if [[ $EUID == 0 ]]; then chmod a+wrx -R ~/.anyshell/hosts ~/.anyshell/status; fi

        last_port=$(( $(ls ~/.anyshell/hosts | wc -l) + 42000 ))
        echo "$HOSTNAME" > ~/.anyshell/hosts/$HOSTNAME
        echo "$USER" >> ~/.anyshell/hosts/$HOSTNAME
        echo "$last_port" >> ~/.anyshell/hosts/$HOSTNAME
        echo "0" >> ~/.anyshell/hosts/$HOSTNAME

        sed -r -i 's/\s+//g' ~/.anyshell/hosts/$HOSTNAME
        echo -e "Setup done:\n"
        cat ~/.anyshell/hosts/$HOSTNAME

        echo -e "\nsending to server..."
        scp -P 41999 ~/.anyshell/hosts/$HOSTNAME $Server_user@$Server_dns:/home/$Server_user/.anyshell/hosts/ >/dev/null
        echo "done"

        echo -e "\ncreating status file..."
        time=$(echo "$(date +%y)$(date +%m)$(date +%d):$(date +%H)$(date +%M)$(date +%S)")
        echo "1" > ~/.anyshell/status/$HOSTNAME
        echo "$time" >> ~/.anyshell/status/$HOSTNAME
        echo "$(ifconfig | sed -En 's/127.0.0.1//;s/.*inet (addr:)?(([0-9]*\.){3}[0-9]*).*/\2/p')" >> ~/.anyshell/status/$HOSTNAME
        echo "$(curl -s ifconfig.me | grep -o -Eo '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')" >> ~/.anyshell/status/$HOSTNAME

        sed -r -i 's/\s+//g' ~/.anyshell/status/$HOSTNAME
        echo -e "\nsending to server..."
        scp -P 41999 ~/.anyshell/status/$HOSTNAME $Server_user@$Server_dns:/home/$Server_user/.anyshell/status/ >/dev/null
        echo "done"
    fi

else
    cat ~/.anyshell/asci.txt
    echo -e "\nCommands:"
    echo "      connect"
    echo "      list"
    echo "      host"
    echo "          up"
    echo "          down"
    echo "          setup"
    echo "          deamon"
    echo "      server"
    echo "      update"
fi
